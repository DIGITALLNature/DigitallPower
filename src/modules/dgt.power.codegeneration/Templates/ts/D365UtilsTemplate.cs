// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace dgt.power.codegeneration.Templates.ts
{
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\raaa\source\repos\DIGITALL\Dynamics Power\src\dgt.power.codegeneration\Templates\ts\D365UtilsTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class D365UtilsTemplate : D365UtilsTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("/* eslint-disable */\r\n/// <reference path=\"");
            
            #line 2 "C:\Users\raaa\source\repos\DIGITALL\Dynamics Power\src\dgt.power.codegeneration\Templates\ts\D365UtilsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TypingPath));
            
            #line default
            #line hidden
            this.Write("\" />\r\n\r\n/**\r\n * This utils module is currently generated by the model generator. " +
                    "This is a temporary solution...\r\n */\r\nexport module D365Utils {\r\n  export class " +
                    "Elements {\r\n    public static IsSetVisibleElement(c: any): c is Xrm.Controls.UiC" +
                    "anSetVisibleElement {\r\n      return \"setVisible\" in c;\r\n    }\r\n  }\r\n  export cla" +
                    "ss Helper {\r\n    /**\r\n     * Get the user id\r\n     * @returns the user id withou" +
                    "t curly braces\r\n     */\r\n    public static GetUserId(): string {\r\n      return B" +
                    "races.RemoveCurlyBraces(Xrm.Utility.getGlobalContext().userSettings.userId);\r\n  " +
                    "  }\r\n    /**\r\n     * Checks if the user has the role\r\n     * @param role this co" +
                    "uld be the id or the name\r\n     * @returns true on match\r\n     */\r\n    public st" +
                    "atic HasUserRole(role: string): boolean {\r\n      let match: boolean = false;\r\n  " +
                    "    Xrm.Utility.getGlobalContext().userSettings.roles.forEach((r) => {\r\n        " +
                    "if (r.id.toLowerCase() == role.toLowerCase() || r.name == role) {\r\n          mat" +
                    "ch = true;\r\n        }\r\n      });\r\n      return match;\r\n    }\r\n  }\r\n  export clas" +
                    "s Braces {\r\n    public static RemoveCurlyBraces(val: string): string {\r\n      re" +
                    "turn val.replace(\"{\", \"\").replace(\"}\", \"\").toLowerCase().trim();\r\n    }\r\n  }\r\n  " +
                    "export class Guid {\r\n    public static NewGuid(): string {\r\n      function S4():" +
                    " string {\r\n        return Math.floor((1 + Math.random()) * 0x10000)\r\n          ." +
                    "toString(16)\r\n          .substring(1);\r\n      }\r\n      return S4() + S4() + \"-\" " +
                    "+ S4() + \"-\" + S4() + \"-\" + S4() + \"-\" + S4() + S4() + S4();\r\n    }\r\n  }\r\n  expo" +
                    "rt class DateTime {\r\n    /**\r\n     * GetValue on a date only attribute returns a" +
                    " date object WITH your local timezone offset\r\n     * e.g. GetValue for 27.09.201" +
                    "9 return 2019-09-26T22:00:00.000Z (GMT+0200 offset)\r\n     * --> to convert these" +
                    " objects to a string without a timezone use this function\r\n     */\r\n    public s" +
                    "tatic ToUtcDateOnlyString(date: Date): string | null {\r\n      if (date == null) " +
                    "return null;\r\n      return new Date(Date.UTC(date?.getFullYear(), date?.getMonth" +
                    "(), date?.getDate()))?.toISOString()?.substring(0, 10);\r\n    }\r\n  }\r\n  export cl" +
                    "ass OptionSet {\r\n    /**\r\n     * Remove all option set values and re add them, s" +
                    "o at the end we have the whole option set filled\r\n     */\r\n    public static ReA" +
                    "ddOptionSetValues(optionSetValues: Xrm.OptionSetValue[], control: Xrm.Controls.O" +
                    "ptionSetControl): void {\r\n      optionSetValues.forEach((item) => {\r\n        con" +
                    "trol.removeOption(item.value);\r\n      });\r\n      optionSetValues.forEach((item) " +
                    "=> {\r\n        control.addOption(item);\r\n      });\r\n    }\r\n    /**\r\n     * Remove" +
                    " clear values and add them, so at the end we have the whole option set filled\r\n " +
                    "    */\r\n    public static SetOptionSetValues(optionSetValues: Xrm.OptionSetValue" +
                    "[], control: Xrm.Controls.OptionSetControl): void {\r\n      control.clearOptions(" +
                    ");\r\n\r\n      optionSetValues.forEach((item) => {\r\n        control.removeOption(it" +
                    "em.value);\r\n      });\r\n      optionSetValues.forEach((item) => {\r\n        contro" +
                    "l.addOption(item);\r\n      });\r\n    }\r\n    /**\r\n     * Remove option set values\r\n" +
                    "     */\r\n    public static RemoveOptionSetValues(optionSetValues: Xrm.OptionSetV" +
                    "alue[], control: Xrm.Controls.OptionSetControl): void {\r\n      optionSetValues.f" +
                    "orEach((item) => {\r\n        control.removeOption(item.value);\r\n      });\r\n    }\r" +
                    "\n  }\r\n}\r\n/* eslint-enable */");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class D365UtilsTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
