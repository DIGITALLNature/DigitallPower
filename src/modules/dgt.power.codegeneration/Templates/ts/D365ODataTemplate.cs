// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace dgt.power.codegeneration.Templates.ts
{
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class D365ODataTemplate : D365ODataTemplateBase
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("/* eslint-disable */\r\n/// <reference path=\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypingPath));
            this.Write("\" />\r\n\r\n/**\r\n * This odata module is currently generated by the model generator. " +
                    "This is a temporary solution...\r\n */\r\nexport module D365OData {\r\n  export class " +
                    "Query {\r\n    public QueryFilter!: Filter;\r\n    public QuerySelect!: Select;\r\n   " +
                    " public QueryTop!: Top;\r\n    public QueryCount!: Count;\r\n    public QueryExpand!" +
                    ": Expand;\r\n    public QueryId!: Id;\r\n    public QueryRecordCount!: RecordCount;\r" +
                    "\n    constructor(private query: string) {}\r\n    public Filter(filter: Filter): Q" +
                    "uery {\r\n      this.QueryFilter = filter;\r\n      return this;\r\n    }\r\n    public " +
                    "Select(select: Select): Query {\r\n      this.QuerySelect = select;\r\n      return " +
                    "this;\r\n    }\r\n    public Top(top: Top): Query {\r\n      this.QueryTop = top;\r\n   " +
                    "   return this;\r\n    }\r\n    public Count(count: Count): Query {\r\n      this.Quer" +
                    "yCount = count;\r\n      return this;\r\n    }\r\n    public Expand(expand: Expand): Q" +
                    "uery {\r\n      this.QueryExpand = expand;\r\n      return this;\r\n    }\r\n    public " +
                    "Id(id: Id): Query {\r\n      this.QueryId = id;\r\n      return this;\r\n    }\r\n    pu" +
                    "blic RecordCount(recordCount: RecordCount): Query {\r\n      this.QueryRecordCount" +
                    " = recordCount;\r\n      return this;\r\n    }\r\n    public static Create(): Query {\r" +
                    "\n      return new Query(\"\");\r\n    }\r\n    public Build(): string {\r\n      var tok" +
                    "en: string = \"?\";\r\n\r\n      if (this.QueryId) {\r\n        this.query += this.Query" +
                    "Id.Build();\r\n      }\r\n\r\n      if (this.QueryFilter && !this.QueryId) {\r\n        " +
                    "this.query += token + this.QueryFilter.Build();\r\n        token = \"&\";\r\n      }\r\n" +
                    "\r\n      if (this.QuerySelect) {\r\n        this.query += token + this.QuerySelect." +
                    "Build();\r\n        token = \"&\";\r\n      }\r\n\r\n      if (this.QueryTop) {\r\n        t" +
                    "his.query += token + this.QueryTop.Build();\r\n        token = \"&\";\r\n      }\r\n\r\n  " +
                    "    if (this.QueryExpand) {\r\n        this.query += token + this.QueryExpand.Buil" +
                    "d();\r\n        token = \"&\";\r\n      }\r\n\r\n      if (this.QueryRecordCount) {\r\n     " +
                    "   this.query = this.QueryRecordCount.Build();\r\n      }\r\n\r\n      return this.que" +
                    "ry;\r\n    }\r\n  }\r\n  export class Filter {\r\n    constructor(private filter: string" +
                    ") {}\r\n    public And(): Filter {\r\n      this.filter += \" and \";\r\n      return th" +
                    "is;\r\n    }\r\n    public Or(): Filter {\r\n      this.filter += \" or \";\r\n      retur" +
                    "n this;\r\n    }\r\n    public Not(): Filter {\r\n      this.filter += \" not \";\r\n     " +
                    " return this;\r\n    }\r\n    public AddCondition(filterCondition: FilterCondition):" +
                    " Filter {\r\n      this.filter += filterCondition.Build();\r\n      return this;\r\n  " +
                    "  }\r\n    public static Create(): Filter {\r\n      return new Filter(\"$filter=\");\r" +
                    "\n    }\r\n    public Build(): string {\r\n      return this.filter;\r\n    }\r\n  }\r\n  e" +
                    "xport class Select {\r\n    constructor(private attributes: string) {}\r\n    public" +
                    " And(): Select {\r\n      this.attributes += \",\";\r\n      return this;\r\n    }\r\n    " +
                    "public AddAttribute(attributeName: string): Select {\r\n      this.attributes += a" +
                    "ttributeName;\r\n      return this;\r\n    }\r\n    public AddAttributeValue(attribute" +
                    "Name: string): Select {\r\n      this.attributes += \"_\" + attributeName + \"_value\"" +
                    ";\r\n      return this;\r\n    }\r\n    public static Create(): Select {\r\n      return" +
                    " new Select(\"$select=\");\r\n    }\r\n    public Build(): string {\r\n      return this" +
                    ".attributes;\r\n    }\r\n  }\r\n  export class Top {\r\n    constructor(private top: str" +
                    "ing) {}\r\n    public SetLimit(value: number): Top {\r\n      this.top += value;\r\n  " +
                    "    return this;\r\n    }\r\n    public static Create(): Top {\r\n      return new Top" +
                    "(\"$top=\");\r\n    }\r\n    public Build(): string {\r\n      return this.top;\r\n    }\r\n" +
                    "  }\r\n  export class Count {\r\n    constructor(private count: string) {}\r\n    publ" +
                    "ic static Create(): Count {\r\n      return new Count(\"$count=true\");\r\n    }\r\n    " +
                    "public Build(): string {\r\n      return this.count;\r\n    }\r\n  }\r\n  export class R" +
                    "ecordCount {\r\n    constructor(private count: string) {}\r\n    public SetTarget(ta" +
                    "rget: string): RecordCount {\r\n      this.count = target + \"/$count\";\r\n      retu" +
                    "rn this;\r\n    }\r\n    public static Create(): RecordCount {\r\n      return new Rec" +
                    "ordCount(\"\");\r\n    }\r\n    public Build(): string {\r\n      return this.count;\r\n  " +
                    "  }\r\n  }\r\n  export class Expand {\r\n    constructor(private expands: string) {}\r\n" +
                    "    public And(): Expand {\r\n      this.expands += \",\";\r\n      return this;\r\n    " +
                    "}\r\n    public AddExpandItem(expandItem: ExpandItem): Expand {\r\n      this.expand" +
                    "s += expandItem.Build();\r\n      return this;\r\n    }\r\n    public static Create():" +
                    " Expand {\r\n      return new Expand(\"$expand=\");\r\n    }\r\n    public Build(): stri" +
                    "ng {\r\n      return this.expands;\r\n    }\r\n  }\r\n  export class ExpandItem {\r\n    c" +
                    "onstructor(private expand: string, private attributes: string) {}\r\n    public Se" +
                    "tLookup(lookupName: string): ExpandItem {\r\n      this.expand = lookupName;\r\n    " +
                    "  return this;\r\n    }\r\n    public And(): ExpandItem {\r\n      this.attributes += " +
                    "\",\";\r\n      return this;\r\n    }\r\n    public AddAttribute(attributeName: string):" +
                    " ExpandItem {\r\n      this.attributes += attributeName;\r\n      return this;\r\n    " +
                    "}\r\n    public static Create(): ExpandItem {\r\n      return new ExpandItem(\"\", \"$s" +
                    "elect=\");\r\n    }\r\n    public Build(): string {\r\n      return this.expand + \"(\" +" +
                    " this.attributes + \")\";\r\n    }\r\n  }\r\n  export class Id {\r\n    constructor(privat" +
                    "e target: string, private id: string) {}\r\n    public SetTarget(target: string): " +
                    "Id {\r\n      this.target = target;\r\n      return this;\r\n    }\r\n    public SetId(i" +
                    "d: string): Id {\r\n      this.id = id;\r\n      return this;\r\n    }\r\n    public sta" +
                    "tic Create(): Id {\r\n      return new Id(\"\", \"\");\r\n    }\r\n    public Build(): str" +
                    "ing {\r\n      return this.target + \"(\" + this.id + \")\";\r\n    }\r\n  }\r\n  export cla" +
                    "ss FilterCondition {\r\n    constructor(private condition: string) {}\r\n    public " +
                    "static GreaterThan(attributeName: string, value: any): FilterCondition {\r\n      " +
                    "var args = [attributeName, \"gt\", value];\r\n      return new FilterCondition(args." +
                    "join(\" \"));\r\n    }\r\n    public static LessThan(attributeName: string, value: any" +
                    "): FilterCondition {\r\n      var args = [attributeName, \"lt\", value];\r\n      retu" +
                    "rn new FilterCondition(args.join(\" \"));\r\n    }\r\n    public static Between(attrib" +
                    "uteName: string, minValue: any, maxValue: any): FilterCondition {\r\n      var arg" +
                    "s = [attributeName, \"gt\", minValue, \"and\", attributeName, \"lt\", maxValue];\r\n    " +
                    "  return new FilterCondition(args.join(\" \"));\r\n    }\r\n    public static Equal(at" +
                    "tributeName: string, value: string): FilterCondition {\r\n      var args = [attrib" +
                    "uteName, \"eq\", value];\r\n      return new FilterCondition(args.join(\" \"));\r\n    }" +
                    "\r\n    public static Contains(attributeName: string, value: string): FilterCondit" +
                    "ion {\r\n      var args = [\"contains(\", attributeName, \",\'\", value, \"\'\"];\r\n      r" +
                    "eturn new FilterCondition(args.join(\"\"));\r\n    }\r\n    public Build(): string {\r\n" +
                    "      return this.condition;\r\n    }\r\n  }\r\n}\r\n/* eslint-enable */\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class D365ODataTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
