/* eslint-disable */
/// <reference path="<#= TypingPath #>" />

/**
 * This utils module is currently generated by the model generator. This is a temporary solution...
 */
export module D365Utils {
  export class Elements {
    public static IsSetVisibleElement(c: any): c is Xrm.Controls.UiCanSetVisibleElement {
      return "setVisible" in c;
    }
  }
  export class Helper {
    /**
     * Get the user id
     * @returns the user id without curly braces
     */
    public static GetUserId(): string {
      return Braces.RemoveCurlyBraces(Xrm.Utility.getGlobalContext().userSettings.userId);
    }
    /**
     * Checks if the user has the role
     * @param role this could be the id or the name
     * @returns true on match
     */
    public static HasUserRole(role: string): boolean {
      let match: boolean = false;
      Xrm.Utility.getGlobalContext().userSettings.roles.forEach((r) => {
        if (r.id.toLowerCase() == role.toLowerCase() || r.name == role) {
          match = true;
        }
      });
      return match;
    }
  }
  export class Braces {
    public static RemoveCurlyBraces(val: string): string {
      return val.replace("{", "").replace("}", "").toLowerCase().trim();
    }
  }
  export class Guid {
    public static NewGuid(): string {
      function S4(): string {
        return Math.floor((1 + Math.random()) * 0x10000)
          .toString(16)
          .substring(1);
      }
      return S4() + S4() + "-" + S4() + "-" + S4() + "-" + S4() + "-" + S4() + S4() + S4();
    }
  }
  export class DateTime {
    /**
     * GetValue on a date only attribute returns a date object WITH your local timezone offset
     * e.g. GetValue for 27.09.2019 return 2019-09-26T22:00:00.000Z (GMT+0200 offset)
     * --> to convert these objects to a string without a timezone use this function
     */
    public static ToUtcDateOnlyString(date: Date): string | null {
      if (date == null) return null;
      return new Date(Date.UTC(date?.getFullYear(), date?.getMonth(), date?.getDate()))?.toISOString()?.substring(0, 10);
    }
  }
  export class OptionSet {
    /**
     * Remove all option set values and re add them, so at the end we have the whole option set filled
     */
    public static ReAddOptionSetValues(optionSetValues: Xrm.OptionSetValue[], control: Xrm.Controls.OptionSetControl): void {
      optionSetValues.forEach((item) => {
        control.removeOption(item.value);
      });
      optionSetValues.forEach((item) => {
        control.addOption(item);
      });
    }
    /**
     * Remove clear values and add them, so at the end we have the whole option set filled
     */
    public static SetOptionSetValues(optionSetValues: Xrm.OptionSetValue[], control: Xrm.Controls.OptionSetControl): void {
      control.clearOptions();

      optionSetValues.forEach((item) => {
        control.removeOption(item.value);
      });
      optionSetValues.forEach((item) => {
        control.addOption(item);
      });
    }
    /**
     * Remove option set values
     */
    public static RemoveOptionSetValues(optionSetValues: Xrm.OptionSetValue[], control: Xrm.Controls.OptionSetControl): void {
      optionSetValues.forEach((item) => {
        control.removeOption(item.value);
      });
    }
  }
}
/* eslint-enable */