<#@ template debug="false" hostspecific="false" language="C#" #>
/* eslint-disable */
/// <reference path="<#= TypingPath #>" />

/**
 * This service module is currently generated by the model generator. This is a temporary solution...
 */
export module D365Services {
  //Logging
  export enum LogLevel {
    Trace = "Trace",
    Debug = "Debug",
    Info = "Info",
    Warn = "Warn",
    Error = "Error"
  }
  export interface ILoggingService {
    Trace(...values: any[]): void;

    Debug(message: string): void;
     
    Info(message: string): void;

    Warn(message: string): void;

    Error(message: string, error?: Error): void;

    Exception(e: unknown): void;
  }
  //Dialog
  export class DialogHandler {
    private static _instance: DialogHandler;
    private readonly logger: ILoggingService;

    private constructor(logger: ILoggingService) {
      this.logger = logger;
    }

    public static Handler(logger: ILoggingService): DialogHandler {
      return this._instance || (this._instance = new this(logger));
    }

    public ErrorDialog(message: string, error?: Error): void {
      const errorOptions: Xrm.Navigation.ErrorDialogOptions = { details: error ? JSON.stringify(error) : message, message: message };
      Xrm.Navigation.openErrorDialog(errorOptions).then(() => {
        this.logger.Error(message, error);
      }, undefined);
    }

    public AlertDialog(title: string | undefined, text: string, callback?: ((value: any) => void | Xrm.Async.PromiseLike<void>) | undefined): void {
      const alertStrings: Xrm.Navigation.AlertStrings = { confirmButtonLabel: "OK", text: text, title: title };
      const alertOptions: Xrm.Navigation.DialogSizeOptions = { height: 240, width: 480 };
      Xrm.Navigation.openAlertDialog(alertStrings, alertOptions).then(callback, (error) => {
        this.logger.Error(error.message, error);
      });
    }
  }
}
/* eslint-enable */
