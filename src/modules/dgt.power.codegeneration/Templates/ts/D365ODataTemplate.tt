<#@ template debug="false" hostspecific="false" language="C#" linePragmas="false" #>
/* eslint-disable */
/// <reference path="<#= TypingPath #>" />

/**
 * This odata module is currently generated by the model generator. This is a temporary solution...
 */
export module D365OData {
  export class Query {
    public QueryFilter!: Filter;
    public QuerySelect!: Select;
    public QueryTop!: Top;
    public QueryCount!: Count;
    public QueryExpand!: Expand;
    public QueryId!: Id;
    public QueryRecordCount!: RecordCount;
    constructor(private query: string) {}
    public Filter(filter: Filter): Query {
      this.QueryFilter = filter;
      return this;
    }
    public Select(select: Select): Query {
      this.QuerySelect = select;
      return this;
    }
    public Top(top: Top): Query {
      this.QueryTop = top;
      return this;
    }
    public Count(count: Count): Query {
      this.QueryCount = count;
      return this;
    }
    public Expand(expand: Expand): Query {
      this.QueryExpand = expand;
      return this;
    }
    public Id(id: Id): Query {
      this.QueryId = id;
      return this;
    }
    public RecordCount(recordCount: RecordCount): Query {
      this.QueryRecordCount = recordCount;
      return this;
    }
    public static Create(): Query {
      return new Query("");
    }
    public Build(): string {
      var token: string = "?";

      if (this.QueryId) {
        this.query += this.QueryId.Build();
      }

      if (this.QueryFilter && !this.QueryId) {
        this.query += token + this.QueryFilter.Build();
        token = "&";
      }

      if (this.QuerySelect) {
        this.query += token + this.QuerySelect.Build();
        token = "&";
      }

      if (this.QueryTop) {
        this.query += token + this.QueryTop.Build();
        token = "&";
      }

      if (this.QueryExpand) {
        this.query += token + this.QueryExpand.Build();
        token = "&";
      }

      if (this.QueryRecordCount) {
        this.query = this.QueryRecordCount.Build();
      }

      return this.query;
    }
  }
  export class Filter {
    constructor(private filter: string) {}
    public And(): Filter {
      this.filter += " and ";
      return this;
    }
    public Or(): Filter {
      this.filter += " or ";
      return this;
    }
    public Not(): Filter {
      this.filter += " not ";
      return this;
    }
    public AddCondition(filterCondition: FilterCondition): Filter {
      this.filter += filterCondition.Build();
      return this;
    }
    public static Create(): Filter {
      return new Filter("$filter=");
    }
    public Build(): string {
      return this.filter;
    }
  }
  export class Select {
    constructor(private attributes: string) {}
    public And(): Select {
      this.attributes += ",";
      return this;
    }
    public AddAttribute(attributeName: string): Select {
      this.attributes += attributeName;
      return this;
    }
    public AddAttributeValue(attributeName: string): Select {
      this.attributes += "_" + attributeName + "_value";
      return this;
    }
    public static Create(): Select {
      return new Select("$select=");
    }
    public Build(): string {
      return this.attributes;
    }
  }
  export class Top {
    constructor(private top: string) {}
    public SetLimit(value: number): Top {
      this.top += value;
      return this;
    }
    public static Create(): Top {
      return new Top("$top=");
    }
    public Build(): string {
      return this.top;
    }
  }
  export class Count {
    constructor(private count: string) {}
    public static Create(): Count {
      return new Count("$count=true");
    }
    public Build(): string {
      return this.count;
    }
  }
  export class RecordCount {
    constructor(private count: string) {}
    public SetTarget(target: string): RecordCount {
      this.count = target + "/$count";
      return this;
    }
    public static Create(): RecordCount {
      return new RecordCount("");
    }
    public Build(): string {
      return this.count;
    }
  }
  export class Expand {
    constructor(private expands: string) {}
    public And(): Expand {
      this.expands += ",";
      return this;
    }
    public AddExpandItem(expandItem: ExpandItem): Expand {
      this.expands += expandItem.Build();
      return this;
    }
    public static Create(): Expand {
      return new Expand("$expand=");
    }
    public Build(): string {
      return this.expands;
    }
  }
  export class ExpandItem {
    constructor(private expand: string, private attributes: string) {}
    public SetLookup(lookupName: string): ExpandItem {
      this.expand = lookupName;
      return this;
    }
    public And(): ExpandItem {
      this.attributes += ",";
      return this;
    }
    public AddAttribute(attributeName: string): ExpandItem {
      this.attributes += attributeName;
      return this;
    }
    public static Create(): ExpandItem {
      return new ExpandItem("", "$select=");
    }
    public Build(): string {
      return this.expand + "(" + this.attributes + ")";
    }
  }
  export class Id {
    constructor(private target: string, private id: string) {}
    public SetTarget(target: string): Id {
      this.target = target;
      return this;
    }
    public SetId(id: string): Id {
      this.id = id;
      return this;
    }
    public static Create(): Id {
      return new Id("", "");
    }
    public Build(): string {
      return this.target + "(" + this.id + ")";
    }
  }
  export class FilterCondition {
    constructor(private condition: string) {}
    public static GreaterThan(attributeName: string, value: any): FilterCondition {
      var args = [attributeName, "gt", value];
      return new FilterCondition(args.join(" "));
    }
    public static LessThan(attributeName: string, value: any): FilterCondition {
      var args = [attributeName, "lt", value];
      return new FilterCondition(args.join(" "));
    }
    public static Between(attributeName: string, minValue: any, maxValue: any): FilterCondition {
      var args = [attributeName, "gt", minValue, "and", attributeName, "lt", maxValue];
      return new FilterCondition(args.join(" "));
    }
    public static Equal(attributeName: string, value: string): FilterCondition {
      var args = [attributeName, "eq", value];
      return new FilterCondition(args.join(" "));
    }
    public static Contains(attributeName: string, value: string): FilterCondition {
      var args = ["contains(", attributeName, ",'", value, "'"];
      return new FilterCondition(args.join(""));
    }
    public Build(): string {
      return this.condition;
    }
  }
}
/* eslint-enable */
