// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace dgt.power.codegeneration.Templates.dotnet
{
    using Microsoft.Xrm.Sdk.Metadata;
    using System.Linq;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class EntityTemplate : EntityTemplateBase
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
 if(_useClassic)
{ // Start usings for dotnet framework full (classic mode)

            this.Write("using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n");
 
} // End EntityTypeCode

            this.Write("using System.ComponentModel;");
            this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCodeUsing));
            this.Write(@"
using System.Runtime.CompilerServices;
using System.Reflection;
using System.Runtime.Serialization;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Client;
using Microsoft.Xrm.Sdk.Query; 
using AttributeCollection = Microsoft.Xrm.Sdk.AttributeCollection;

// ReSharper disable All
namespace ");
            this.Write(this.ToStringHelper.ToStringWithCulture(NameSpace));
            this.Write("\r\n{\r\n\t/// <inheritdoc />\r\n\t");
            this.Write(this.ToStringHelper.ToStringWithCulture(Summary(GetLocalizedLabel(EntityMetadata.Description),1)));
            this.Write("\r\n\t[DataContractAttribute()]\r\n\t[EntityLogicalNameAttribute(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(EntityMetadata.LogicalName));
            this.Write("\")]\r\n\t[System.CodeDom.Compiler.GeneratedCode(\"ec4u.automation\", \"1.0.0\")]\r\n\tpubli" +
                    "c partial class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(CamelCase(EntityMetadata.SchemaName)));
            this.Write(" : Entity, INotifyPropertyChanging, INotifyPropertyChanged\r\n    {\r\n\t    #region c" +
                    "tor\r\n\t\t");
            this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCode(2)));
            this.Write("public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(CamelCase(EntityMetadata.SchemaName)));
            this.Write("() : this(false)\r\n        {\r\n        }\r\n\r\n        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCode(2)));
            this.Write("public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(CamelCase(EntityMetadata.SchemaName)));
            this.Write("(bool trackChanges = false) : base(EntityLogicalName)\r\n        {\r\n\t\t\t_trackChange" +
                    "s = trackChanges;\r\n        }\r\n\r\n        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCode(2)));
            this.Write("public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(CamelCase(EntityMetadata.SchemaName)));
            this.Write("(Guid id, bool trackChanges = false) : base(EntityLogicalName,id)\r\n        {\r\n\t\t\t" +
                    "_trackChanges = trackChanges;\r\n        }\r\n\r\n        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCode(2)));
            this.Write("public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(CamelCase(EntityMetadata.SchemaName)));
            this.Write("(KeyAttributeCollection keyAttributes, bool trackChanges = false) : base(EntityLo" +
                    "gicalName,keyAttributes)\r\n        {\r\n\t\t\t_trackChanges = trackChanges;\r\n        }" +
                    "\r\n\r\n        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCode(2)));
            this.Write("public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(CamelCase(EntityMetadata.SchemaName)));
            this.Write(@"(string keyName, object keyValue, bool trackChanges = false) : base(EntityLogicalName, keyName, keyValue)
        {
			_trackChanges = trackChanges;
        }
        #endregion

		#region fields
        private readonly bool _trackChanges;
        private readonly Lazy<HashSet<string>> _changedProperties = new Lazy<HashSet<string>>();
        #endregion

        #region consts
        public const string EntityLogicalName = """);
            this.Write(this.ToStringHelper.ToStringWithCulture(EntityMetadata.LogicalName));
            this.Write("\";\r\n");
 if (HasPrimaryNameAttribute)
{

            this.Write("        public const string PrimaryNameAttribute = \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(EntityMetadata.PrimaryNameAttribute));
            this.Write("\";\r\n");

}

if(!_suppressEntityTypeCode)
{ // Start EntityTypeCode

            this.Write("        public const int EntityTypeCode = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(EntityMetadata.ObjectTypeCode));
            this.Write(";\r\n");
 
} // End EntityTypeCode

            this.Write("        #endregion\r\n\r\n        #region Events\r\n");
 if(_useClassic)
{ // Start PropertyChangedEventHandler for dotnet framework full (classic mode)

            this.Write("        public event PropertyChangedEventHandler PropertyChanged;\r\n        public" +
                    " event PropertyChangingEventHandler PropertyChanging;\r\n");

}
else 
{

            this.Write("        public event PropertyChangedEventHandler? PropertyChanged;\r\n        publi" +
                    "c event PropertyChangingEventHandler? PropertyChanging;\r\n");
 
} // End PropertyChangedEventHandler

            this.Write("\r\n        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCode(2)));
            this.Write(@"private void OnPropertyChanged([CallerMemberName] string propertyName = """")
        {
            if (PropertyChanged != null) PropertyChanged.Invoke(this, new PropertyChangedEventArgs(propertyName));
            if (_trackChanges)
            {
                _changedProperties.Value.Add(propertyName);
            }
        }

        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCode(2)));
            this.Write(@"private void OnPropertyChanging([CallerMemberName] string propertyName = """")
        {
            if (PropertyChanging != null) PropertyChanging.Invoke(this, new PropertyChangingEventArgs(propertyName));
        }

        #endregion

		#region Attributes
		[AttributeLogicalNameAttribute(""");
            this.Write(this.ToStringHelper.ToStringWithCulture(EntityMetadata.PrimaryIdAttribute));
            this.Write("\")]\r\n\t\tpublic new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Virtual));
            this.Write("System.Guid Id\r\n\t\t{\r\n\t\t    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCode(3)));
            this.Write("get\r\n\t\t\t{\r\n\t\t\t\treturn base.Id;\r\n\t\t\t}\r\n            ");
            this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCode(3)));
            this.Write("set\r\n\t\t\t{\r\n");
 var keyAttribute = EntityMetadata.Attributes.Single(a => a.LogicalName == EntityMetadata.PrimaryIdAttribute);
if(keyAttribute.IsValidForCreate.GetValueOrDefault())
{

            this.Write("\t\t\t\t");
            this.Write(this.ToStringHelper.ToStringWithCulture(PreventBadToken(CamelCase(keyAttribute.SchemaName))));
            this.Write(" = value;\r\n");

}
else 
{

            this.Write("\t\t\t\tbase.Id = value;\t\r\n");

}

            this.Write("\t\t\t}\r\n\t\t}\r\n\r\n");
 foreach(var attr in Filter(EntityMetadata.Attributes))
{ 
		var attrName = Unique(PreventBadToken(CamelCase(attr.SchemaName)),"A"+EntityMetadata.LogicalName);

            this.Write("\t\t");
            this.Write(this.ToStringHelper.ToStringWithCulture(Summary(GetLocalizedLabel(attr.Description),2)));
            this.Write("\r\n\t\t[AttributeLogicalName(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(attr.LogicalName));
            this.Write("\")]\r\n        public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Virtual));
            this.Write(this.ToStringHelper.ToStringWithCulture(ConvertType(attr.AttributeType, attr.AttributeTypeName?.Value)));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture(attrName));
            this.Write("\r\n        {\r\n");
 	if(attr.IsValidForRead.HasValue && attr.IsValidForRead.Value)
	{ // Start Getter

            this.Write("            ");
            this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCode(3)));
            this.Write("get\r\n            {\r\n");

		if (attr.AttributeType != AttributeTypeCode.PartyList)
		{ 

            this.Write("                return GetAttributeValue<");
            this.Write(this.ToStringHelper.ToStringWithCulture(ConvertType(attr.AttributeType, attr.AttributeTypeName?.Value)));
            this.Write(">(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(attr.LogicalName));
            this.Write("\");\r\n");

		}
		else
		{

            this.Write("\t\t\t\tvar collection = this.GetAttributeValue<EntityCollection>(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(attr.LogicalName));
            this.Write("\");\r\n\t\t\t\tif (collection?.Entities != null)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn collection.Entitie" +
                    "s.Select(e => e.ToEntity<ActivityParty>());\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\treturn" +
                    " null;\r\n\t\t\t\t}\r\n");

		} // line 110

            this.Write("            }\r\n");

	} // End Getter
	if(_editableReadOnlyProperties || (attr.IsValidForUpdate.HasValue && attr.IsValidForUpdate.Value)|| (attr.IsValidForCreate.HasValue && attr.IsValidForCreate.Value))
	{ // Start Setter

            this.Write("            ");
            this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCode(3)));
            this.Write("set\r\n            {\r\n                OnPropertyChanging(nameof(");
            this.Write(this.ToStringHelper.ToStringWithCulture(attrName));
            this.Write("));\r\n");

		if (attr.AttributeType != AttributeTypeCode.PartyList)
		{

            this.Write("                SetAttributeValue(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(attr.LogicalName));
            this.Write("\", value);\r\n");
 
			if(attr.IsPrimaryId.HasValue && attr.IsPrimaryId.Value)
			{

            this.Write("\t\t\t\tif (value.HasValue)\r\n\t\t\t\t{\r\n\t\t\t\t\tbase.Id = value.Value;\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t" +
                    "\t{\r\n\t\t\t\t\tbase.Id = System.Guid.Empty;\r\n\t\t\t\t}\r\n");

			}
		} // line 142
		else
		{

            this.Write("\t\t\t\tif ((value == null))\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.SetAttributeValue(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(attr.LogicalName));
            this.Write("\", value);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.SetAttributeValue(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(attr.LogicalName));
            this.Write("\", new EntityCollection(new List<Entity>(value)));\r\n\t\t\t\t}\r\n");

		} // line 161

            this.Write("                OnPropertyChanged(nameof(");
            this.Write(this.ToStringHelper.ToStringWithCulture(attrName));
            this.Write("));\r\n            }\r\n");

	} // End Setter

            this.Write("        }\r\n\r\n");
 
} // End Attribute loop

            this.Write("\r\n\t\t#endregion\r\n\r\n");

if(!_suppressNavigationProperties)
{ // Start NavigationProperties

            this.Write("\t\t#region NavigationProperties\r\n");
 	foreach(var attr in EntityMetadata.OneToManyRelationships.OrderBy(r => r.SchemaName).ToList()) 
	{ 
		if(!_configEntities.Contains(attr.ReferencingEntity))
		{
			continue; // Ignore Navigation Propertys to Entitys not generated
		}
		var attrName = Unique(PreventBadToken(CamelCase(attr.SchemaName)),"N"+EntityMetadata.LogicalName);

            this.Write("\t\t/// <summary>\r\n\t\t/// 1:N ");
            this.Write(this.ToStringHelper.ToStringWithCulture(attr.SchemaName));
            this.Write("\r\n\t\t/// </summary>\t\r\n\t\t[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(attr.SchemaName));
            this.Write("\")]\r\n\t\tpublic System.Collections.Generic.IEnumerable<");
            this.Write(this.ToStringHelper.ToStringWithCulture(CamelCase(RetrieveSchemaName(attr.ReferencingEntity))));
            this.Write("> ");
            this.Write(this.ToStringHelper.ToStringWithCulture(attrName));
            this.Write("\r\n\t\t{\r\n\t\t\t");
            this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCode(3)));
            this.Write("get\r\n\t\t\t{\r\n\t\t\t\treturn this.GetRelatedEntities<");
            this.Write(this.ToStringHelper.ToStringWithCulture(CamelCase(RetrieveSchemaName(attr.ReferencingEntity))));
            this.Write(">(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(attr.SchemaName));
            this.Write("\", null);\r\n\t\t\t}\r\n\t\t\t");
            this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCode(3)));
            this.Write("set\r\n\t\t\t{\r\n\t\t\t\tthis.OnPropertyChanging(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(attrName));
            this.Write("\");\r\n\t\t\t\tthis.SetRelatedEntities<");
            this.Write(this.ToStringHelper.ToStringWithCulture(CamelCase(RetrieveSchemaName(attr.ReferencingEntity))));
            this.Write(">(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(attr.SchemaName));
            this.Write("\", null, value);\r\n\t\t\t\tthis.OnPropertyChanged(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(attrName));
            this.Write("\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n");
 	} 
            this.Write("\t\t#endregion\r\n");
 
} // End NavigationProperties

            this.Write("\r\n");
 if(!_suppressOptions)
{ // Start Options

            this.Write("\t\t#region Options\r\n\t\tpublic static class Options\r\n\t\t{\r\n");
 	foreach(var optionField in FilterOptions(EntityMetadata.Attributes)) 
	{ 
		if(optionField.AttributeType == AttributeTypeCode.Picklist) 
		{ 
            this.Write("\t\t\t    public struct ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Unique(CamelCase(optionField.SchemaName),"O"+EntityMetadata.LogicalName)));
            this.Write("\r\n                {\r\n");
 			foreach(var option in optionField.Options)	
			{ 
            this.Write("\t\t\t\t\tpublic const int ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Unique(Sanitize(CamelCase(option.Label)),EntityMetadata.LogicalName+optionField.SchemaName)));
            this.Write(" = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(option.Value));
            this.Write(";\r\n");
 			} 
            this.Write("                }\r\n");
 		} else if(optionField.AttributeType == AttributeTypeCode.Virtual)
		{ 
            this.Write("                public struct ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Unique(CamelCase(optionField.SchemaName),"O"+EntityMetadata.LogicalName)));
            this.Write("\r\n                {\r\n");
 			foreach(var option in optionField.Options)	
			{ 
            this.Write("\t\t\t\t\tpublic const int ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Unique(Sanitize(CamelCase(option.Label)),EntityMetadata.LogicalName+optionField.SchemaName)));
            this.Write(" = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(option.Value));
            this.Write(";\r\n");
 			} 
            this.Write("                }\r\n");
 		} else  if(optionField.AttributeType == AttributeTypeCode.Status)
		{ 
            this.Write("                public struct ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Unique(CamelCase(optionField.SchemaName),"O"+EntityMetadata.LogicalName)));
            this.Write("\r\n                {\r\n");
 			foreach(var option in optionField.Options)	
			{ 
            this.Write("\t\t\t\t\tpublic const int ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Unique(Sanitize(CamelCase(option.Label)),EntityMetadata.LogicalName+optionField.SchemaName)));
            this.Write(" = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(option.Value));
            this.Write(";\r\n");
 			} 
            this.Write("                }\r\n");
 		} else  if(optionField.AttributeType == AttributeTypeCode.State)
		{ 
            this.Write("                public struct ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Unique(CamelCase(optionField.SchemaName),"O"+EntityMetadata.LogicalName)));
            this.Write("\r\n                {\r\n");
 			foreach(var option in optionField.Options)	
			{ 
            this.Write("\t\t\t\t\tpublic const int ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Unique(Sanitize(CamelCase(option.Label)),EntityMetadata.LogicalName+optionField.SchemaName)));
            this.Write(" = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(option.Value));
            this.Write(";\r\n");
 			} 
            this.Write("                }\r\n");
 		} else {
var structLabel = Unique(CamelCase(optionField.SchemaName),"O"+EntityMetadata.LogicalName);
var falseLabel = Sanitize(CamelCase(optionField.Options[0].Label));
var trueLabel = Sanitize(CamelCase(optionField.Options[1].Label));
if(structLabel.Equals(falseLabel, StringComparison.InvariantCultureIgnoreCase)){
  falseLabel = falseLabel + "_";
}
if(structLabel.Equals(trueLabel, StringComparison.InvariantCultureIgnoreCase)){
  trueLabel = trueLabel + "_";
}

            this.Write("                public struct ");
            this.Write(this.ToStringHelper.ToStringWithCulture(structLabel));
            this.Write("\r\n                {\r\n                    public const bool ");
            this.Write(this.ToStringHelper.ToStringWithCulture(falseLabel));
            this.Write(" = false;\r\n                    public const bool ");
            this.Write(this.ToStringHelper.ToStringWithCulture(trueLabel));
            this.Write(" = true;\r\n                }\r\n");

		}
	}

            this.Write("\t\t}\r\n\t\t#endregion\r\n");
 
} // End Options

            this.Write("\r\n");

if(!_suppressLogicalNames)
{ // Start LogicalNames

            this.Write("\t\t#region LogicalNames\r\n\t\tpublic static class LogicalNames\r\n\t\t{\r\n");
 	foreach(var attr in Filter(EntityMetadata.Attributes)) 
	{ 
            this.Write("\t\t\t\tpublic const string ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Unique(CamelCase(attr.SchemaName),"L"+EntityMetadata.LogicalName)));
            this.Write(" = \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(attr.LogicalName));
            this.Write("\";\r\n");
 	} 
            this.Write("\t\t}\r\n\t\t#endregion\r\n");
 
} // End LogicalNames


if(!_suppressAlternateKeys && EntityMetadata.Keys.Length > 0)
{ // Start AlternateKeys

            this.Write("\r\n\t\t#region AlternateKeys\r\n\t\tpublic static class AlternateKeys\r\n\t\t{\r\n");
 	foreach(var key in EntityMetadata.Keys.OrderBy(key => key.LogicalName).ToList()) 
	{ 
            this.Write("\t\t\t\tpublic const string ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Unique(Sanitize(CamelCase(GetLocalizedLabel(key.DisplayName))),"K"+key.LogicalName)));
            this.Write(" = \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(MaskDoubleQuote(key.LogicalName)));
            this.Write("\";\r\n");
 	} 
            this.Write("\t\t}\r\n\t\t#endregion\r\n");
 
} // End AlternateKeys

            this.Write("\r\n");

if(!_suppressRelations)
{ // Start Relations

            this.Write("\t\t#region Relations\r\n        public static class Relations\r\n        {\r\n          " +
                    "  public static class OneToMany\r\n            {\r\n");
 	foreach(var attr in EntityMetadata.OneToManyRelationships.OrderBy(r => r.SchemaName).ToList()) 
	{ 
            this.Write("\t\t\t\tpublic const string ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Unique(CamelCase(attr.SchemaName),"ROTM"+EntityMetadata.LogicalName)));
            this.Write(" = \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(attr.SchemaName));
            this.Write("\";\r\n");
 	} 
            this.Write("            }\r\n\r\n            public static class ManyToOne\r\n            {\r\n");
 	foreach(var attr in EntityMetadata.ManyToOneRelationships.OrderBy(r => r.SchemaName).ToList()) 
	{ 
            this.Write("\t\t\t\tpublic const string ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Unique(CamelCase(attr.SchemaName),"RMTO"+EntityMetadata.LogicalName)));
            this.Write(" = \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(attr.SchemaName));
            this.Write("\";\r\n");
 	} 
            this.Write("            }\r\n\r\n            public static class ManyToMany\r\n            {\r\n");
 	foreach(var attr in EntityMetadata.ManyToManyRelationships.OrderBy(r => r.SchemaName).ToList()) 
	{ 
            this.Write("\t\t\t\tpublic const string ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Unique(CamelCase(attr.SchemaName),"RMTM"+EntityMetadata.LogicalName)));
            this.Write(" = \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(attr.SchemaName));
            this.Write("\";\r\n");
 	} 
            this.Write("            }\r\n        }\r\n\r\n        #endregion\r\n");
 
} // End Relations

            this.Write("\r\n\t\t#region Methods\r\n");
 if (HasPrimaryNameAttribute)
{

            this.Write("        public EntityReference ToNamedEntityReference()\r\n        {\r\n            v" +
                    "ar reference = ToEntityReference();\r\n");
 if(_useClassic)
{

            this.Write("            reference.Name = GetAttributeValue<string>(PrimaryNameAttribute);\r\n\r\n" +
                    "");
 } else { 
            this.Write("            reference.Name = GetAttributeValue<string?>(PrimaryNameAttribute);\r\n");

}

            this.Write("            return reference;\r\n        }\r\n");

} // HasPrimaryNameAttribute end

            this.Write("        public static ");
            this.Write(this.ToStringHelper.ToStringWithCulture(CamelCase(EntityMetadata.SchemaName)));
            this.Write(" Retrieve(IOrganizationService service, Guid id)\r\n        {\r\n            return R" +
                    "etrieve(service,id, new ColumnSet(true));\r\n        }\r\n\r\n        public static ");
            this.Write(this.ToStringHelper.ToStringWithCulture(CamelCase(EntityMetadata.SchemaName)));
            this.Write(" Retrieve(IOrganizationService service, Guid id, ColumnSet columnSet)\r\n        {\r" +
                    "\n            return service.Retrieve(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(EntityMetadata.LogicalName));
            this.Write("\", id, columnSet).ToEntity<");
            this.Write(this.ToStringHelper.ToStringWithCulture(CamelCase(EntityMetadata.SchemaName)));
            this.Write(">();\r\n        }\r\n\r\n        public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(CamelCase(EntityMetadata.SchemaName)));
            this.Write(" GetChangedEntity()\r\n        {\r\n            if (_trackChanges)\r\n            {\r\n  " +
                    "              var attr = new AttributeCollection();\r\n");
 if(_useClassic)
{ // Start changedProperties query for dotnet framework full (classic mode)

            this.Write(@"                foreach (var attrName in _changedProperties.Value.Select(changedProperty => ((AttributeLogicalNameAttribute) GetType().GetProperty(changedProperty).GetCustomAttribute(typeof (AttributeLogicalNameAttribute))).LogicalName).Where(attrName => Contains(attrName)))
");

}
else 
{

            this.Write(@"                foreach (var attrName in _changedProperties.Value.Select(changedProperty => ((AttributeLogicalNameAttribute) GetType().GetProperty(changedProperty)!.GetCustomAttribute(typeof (AttributeLogicalNameAttribute))!).LogicalName).Where(attrName => Contains(attrName)))
");
 
} // End changedProperties query

            this.Write("                {\r\n                    attr.Add(attrName,this[attrName]);\r\n      " +
                    "          }\r\n                return new  ");
            this.Write(this.ToStringHelper.ToStringWithCulture(CamelCase(EntityMetadata.SchemaName)));
            this.Write("(Id) {Attributes = attr };\r\n            }\r\n            return this;\r\n        }\r\n " +
                    "       #endregion\r\n\t}\r\n\r\n");

if(!_suppressContext)
{ // Start Context

            this.Write("\t#region Context\r\n\tpublic partial class DataContext\r\n\t{\r\n\t\tpublic IQueryable<");
            this.Write(this.ToStringHelper.ToStringWithCulture(CamelCase(EntityMetadata.SchemaName)));
            this.Write("> ");
            this.Write(this.ToStringHelper.ToStringWithCulture(CamelCase(EntityMetadata.SchemaName)));
            this.Write("Set\r\n\t\t{\r\n\t\t\tget\r\n\t\t\t{\r\n\t\t\t\treturn CreateQuery<");
            this.Write(this.ToStringHelper.ToStringWithCulture(CamelCase(EntityMetadata.SchemaName)));
            this.Write(">();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t#endregion\r\n");
 
} // End Context

            this.Write("}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class EntityTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
